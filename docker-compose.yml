version: "3.9"

services:
  # -------------------------------
  # Core Messaging & Storage Layer
  # -------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT:-2181}
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT:-2181}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS:-PLAINTEXT://kafka:9092}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
    ports:
      - "9092:9092"

  # Kafka topic initialization
  kafka-init:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka-init
    depends_on:
      - kafka
    entrypoint: /bin/bash
    command: >
      -c "
      echo '⏳ Waiting for Kafka to be ready...' &&
      cub kafka-ready -b kafka:9092 1 60 &&
      echo '📋 Creating Kafka topics...' &&
      kafka-topics --create --bootstrap-server kafka:9092 --topic trades_raw --partitions 3 --replication-factor 1 --if-not-exists &&
      kafka-topics --create --bootstrap-server kafka:9092 --topic trades_enriched --partitions 3 --replication-factor 1 --if-not-exists &&
      echo '✅ Topics created successfully!' &&
      kafka-topics --list --bootstrap-server kafka:9092
      "

  schema-registry:
    profiles: ["sr"]
    image: confluentinc/cp-schema-registry:7.6.1
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:${SCHEMA_REGISTRY_PORT:-8081}
    ports:
      - "8081:8081"

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-airflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-airflow}
      POSTGRES_DB: ${POSTGRES_DB:-airflow}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:8.8
    container_name: trading-analytics-platform-pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@local.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres

  # -------------------------------
  # ClickHouse – Real-Time Store
  # -------------------------------
  clickhouse:
    image: clickhouse/clickhouse-server:24.7
    container_name: clickhouse
    ports:
      - "8123:8123"     # HTTP interface
      - "9000:9000"     # Native TCP interface
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  clickhouse-init:
    image: clickhouse/clickhouse-server:24.7
    container_name: clickhouse-init
    depends_on:
      clickhouse:
        condition: service_healthy
    volumes:
      - ./scripts/init-clickhouse.sh:/init-clickhouse.sh
    entrypoint: ["bash", "/init-clickhouse.sh"]
    
  minio:
    image: minio/minio:RELEASE.2024-05-10T01-41-38Z
    command: server /data --console-address ":${MINIO_CONSOLE_PORT:-9001}"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio123}
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio:/data

  # -------------------------------
  # Apache Spark (Custom Build)
  # -------------------------------
    # -------------------------------
  # Apache Spark (Custom Build)
  # -------------------------------
  spark-master:
    build:
      context: .
      dockerfile: docker/spark/Dockerfile
    container_name: spark-master
    command: >
      bash -c "/opt/spark/sbin/start-master.sh && tail -f /dev/null"
    ports:
      - "7077:7077"
      - "8082:8080"
    volumes:
      - ./spark:/opt/spark-apps
      - ./scripts:/opt/spark-apps/scripts
      - ./spark/conf/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf

    depends_on:
      - kafka
      - clickhouse

  spark-worker-1:
    build:
      context: .
      dockerfile: docker/spark/Dockerfile
    container_name: spark-worker-1
    depends_on:
      - spark-master
    volumes:
      - ./spark/conf/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
    command: >
      bash -c "/opt/spark/sbin/start-worker.sh spark://spark-master:7077 && tail -f /dev/null"

  spark-worker-2:
    build:
      context: .
      dockerfile: docker/spark/Dockerfile
    container_name: spark-worker-2
    volumes:
      - ./spark/conf/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
    depends_on:
      - spark-master
    command: >
      bash -c "/opt/spark/sbin/start-worker.sh spark://spark-master:7077 && tail -f /dev/null"


  # -------------------------------
  # Query Engine (Trino)
  # -------------------------------
  trino:
    image: trinodb/trino:438
    ports:
      - "8080:8080"
    volumes:
      - ./docker/trino/etc/catalog:/etc/trino/catalog
    environment:
      JAVA_TOOL_OPTIONS: "-Dnode.environment=production -Dnode.id=trino-node-1"
    depends_on:
      - minio
      - postgres

  # -------------------------------
  # Apache Airflow
  # -------------------------------
  airflow-init:
    image: apache/airflow:2.9.3
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "True"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/requirements.txt:/requirements.txt
    command: >
      bash -c "pip install -r /requirements.txt &&
               airflow db init &&
               airflow users create --username admin --password admin --firstname A --lastname D --role Admin --email admin@example.com"

  airflow-webserver:
    image: apache/airflow:2.9.3
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "True"
    ports:
      - "8087:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/requirements.txt:/requirements.txt
    command: ["airflow", "webserver"]

  airflow-scheduler:
    image: apache/airflow:2.9.3
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "True"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/requirements.txt:/requirements.txt
    command: ["airflow", "scheduler"]

  # -------------------------------
  # BI Tools
  # -------------------------------
  superset:
    image: apache/superset:3.1.0
    container_name: superset
    ports:
      - "8088:8088"
    environment:
      SUPERSET_SECRET_KEY: superset
    depends_on:
      - trino
    command: >
      bash -c "
      pip install trino sqlalchemy-trino &&
      superset db upgrade &&
      superset fab create-admin --username admin --firstname Admin --lastname User --email admin@admin.com --password admin &&
      superset init &&
      superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger"

  metabase:
    image: metabase/metabase:v0.49.13
    ports:
      - "3000:3000"
    environment:
      MB_DB_FILE: /metabase.db
      MB_PLUGINS_DIR: /plugins
    volumes:
      - metabase:/metabase.db
      - ./metabase/plugins:/plugins

# -------------------------------
# Volumes
# -------------------------------
volumes:
  pgdata:
  minio:
  metabase:
  clickhouse_data:  